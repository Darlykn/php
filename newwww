<?php
namespace App\HTML;
use Tightenco\Collect;

function stringify(array $tag): ?string {
    switch ($tag['tagType']) {
        case 'single':
            return '<' . tagPart($tag) . '>';
        case 'pair':
            return '<' . tagPart($tag) . '>' . $tag['body'] . '</' . $tag['name'] . '>';
        default:
            return null;
    }
}

function tagPart(array $tag): string {
    $exceptedTags = [
        'single' => ['name', 'tagType'],
        'pair' => ['name', 'tagType', 'body']
    ];

    return trim($tag['name'] . ' ' . collect($tag)
                ->except($exceptedTags[$tag['tagType']])
                ->implode(fn ($value, $key) => $key . '=' . '"' . $value . '"', ' '));
}


<?php
namespace App;
class DatabaseConfigLoader {
    private string $path;
    public function __construct(string $path) {
        $this->path = $path;
    }

    public function load(string $env): array {
        $filename = "{$this->path}/database.{$env}.json";
        $raw = file_get_contents($filename);
        $config = json_decode($raw, associative: true);

        if (isset($config['extend'])) {
            $config = array_merge($this->load($config['extend']), $config);
            unset($config['extend']);
        }

        return $config;
    }
}


<?php

namespace App\Tests;

use App\DatabaseConfigLoader;
use PHPUnit\Framework\TestCase;

class DatabaseConfigLoaderTest extends TestCase
{
    private $loader;

    public function setUp(): void
    {
        $this->loader = new DatabaseConfigLoader(__DIR__ . '/fixtures');
    }

    public function testLoad1()
    {
        $config = $this->loader->load('production');
        $expected = [
            'host' => 'google.com',
            'username' => 'postgres'
        ];
        $this->assertEquals($expected, $config);
    }

    public function testLoad2()
    {
        $config = $this->loader->load('custom');
        $expected = [
            'username' => 'mysupername'
        ];
        $this->assertEquals($expected, $config);
    }

    public function testLoadWithExtend()
    {
        $config = $this->loader->load('development');
        $expected = [
            'host' => 'localhost',
            'username' => 'postgres',
            'port' => 5000,
        ];
        $this->assertEquals($expected, $config);
    }
}

