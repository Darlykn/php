<?php
namespace App\LinkedList;

use App\Node;
function reverse($node)
{
    $reversedList = new Node($node->getValue());
    $current = $node -> getNext();

    while ($current) {
        $reversedList = new Node($current->getValue(), $reversedList);
        $current = $current->getNext();
    }
    return $reversedList;
}

<?php
namespace App\HTML;

function getLinks(array $tags): array
{
    $searchingTags = array_filter($tags, fn($item)=>$item['name'] === 'a' || $item['name'] === 'link' ||
    $item['name'] === 'img');
    return array_reduce($searchingTags, function ($acc, $item) {
        switch ($item) {
            case $item['name'] === 'img':
                $acc[] =  $item['src'];
                break;
            case $item['name'] === 'a' || $item['name'] === 'link':
                $acc[] = $item['href'];
                break;
        }
        return $acc;
    }, []);
}

<?php
namespace App\HTML;

function stringify(array $tag): string
{
    $type = $tag['tagType'];
    $mapping = [
        'pair' =>
            function ($tag) {
                $pair = '';
                $info = '';
                $body = '';
                foreach ($tag as $key => $value) {
                    switch ($key) {
                        case 'name':
                            $pair = $value;
                            break;
                        case 'tagType':
                            break;
                        case 'body':
                            $body = ">{$value}<";
                            break;
                        default:
                            $info .= ' ' . $key . '=' . '"' . $value . '"';
                    }
                }
                return "<{$pair}{$info}{$body}/{$pair}>";
            },
        'single' =>
                function ($tag) {
                    $pair = '';
                    $body = '';
                    foreach ($tag as $key => $value) {
                        switch ($key) {
                            case 'name':
                                $pair = $value;
                                break;
                            case 'tagType':
                                break;
                            default:
                                $body .= ' ' . $key . '=' . '"' . $value . '"';
                        }
                    }
                    return "<{$pair}{$body}>";
                }
            ];
    return $mapping[$type]($tag);
}
