namespace App;

class HTMLElement
{
    private $attributes = [];

    public function __construct($attributes = [])
    {
        $this->attributes = $attributes;
    }

    protected function stringifyAttributes()
    {
        return implode(' ', array_map(function ($key, $value) {
            return "$key=\"$value\"";
        }, array_keys($this->attributes), $this->attributes));
    }
}

namespace App;

class HTMLHrElement extends HTMLElement
{
    public function __toString()
    {
        $attributes = $this->stringifyAttributes();
        return "<hr " . $attributes . ">";
    }
}



<?php



namespace App;

class HTMLElement
{
    private $attributes = [];

    public function __construct($attributes = [])
    {
        $this->attributes = $attributes;
    }

    protected function stringifyAttributes()
    {
        // BEGIN (write your solution here)
        
        // END
    }
}
<?php

namespace App;

// BEGIN (write your solution here)

// END




<?php

namespace App\Square;

use App\Dispatcher;

function init()
{
    Dispatcher\defmethod(__NAMESPACE__, 'getArea', function ($self) {
        $side = getSide($self);
        return $side * $side;
    });
}

function make($sideLength)
{
    return ['name' => __NAMESPACE__, 'data' => ['side' => $sideLength]];
}

function getSide($self)
{
    return $self['data']['side'];
}




<?php

namespace App\Figure;

use App\Dispatcher;

function getArea($self, ...$args)
{
    return Dispatcher\call($self, __FUNCTION__, $args);
}
<?php

namespace App\Circle;

use App\Dispatcher;

function init()
{
    Dispatcher\defmethod(__NAMESPACE__, 'getArea', function ($self) {
        return pi() * $self['data']['radius'] ** 2;
    });
}

function make($radius)
{
    return ['name' => __NAMESPACE__, 'data' => ['radius' => $radius]];
}

function getRadius($self)
{
    return $self['data']['radius'];
}
<?php

namespace App\Square;

use App\Dispatcher;

// BEGIN (write your solution here)

// END





<?php

namespace App\Helpers;

function getGreeting($user)
{
    $userType = $user->getType();

    if ($userType == 'registered') {
        return "Hello " . $user->getName() . "!";
    } elseif ($userType == 'guest') {
        return "Nice to meet you Guest!";
    } else {
        // Опционально: обработка других типов пользователей
        return "Hello there!";
    }
}
<?php

namespace App;

class User
{
    // ... существующий код ...

    public function getType()
    {
        return 'registered';
    }

    // ... остальной код ...
}

class Guest
{
    // ... существующий код ...

    public function getType()
    {
        return 'guest';
    }

    // ... остальной код ...
}



<?php
function sayHi($user)
{
 if ($user->isUser()) {
 print_r("Hello, {$user}!");
 } elseif ($user->isGuest()) {
 print_r('Hello, guest!');
 } else {
 print_r('Who you are?');
 }
}

<?php

namespace App;

class User
{
    private $name;

    public function __construct($name)
    {
        $this->name = $name;
    }

    public function getName()
    {
        return $this->name;
    }

    public function getGreeting()
    {
        return "Hello " . $this->getName() . "!";
    }
}

class Guest
{
    public function getName()
    {
        return 'Guest';
    }

    public function getGreeting()
    {
        return "Nice to meet you Guest!";
    }
}


<?php

namespace App\Helpers;

function getGreeting($user)
{
    return $user->getGreeting();
}
