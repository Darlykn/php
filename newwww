namespace App;

class Base
{
    public function isInstanceOf($className)
    {
        // Получаем имя текущего класса
        $currentClass = get_class($this);

        // Проверяем, совпадает ли текущий класс с заданным
        if ($currentClass === $className) {
            return true;
        }

        // Получаем всех родителей текущего класса
        $parents = class_parents($this);

        // Проверяем, находится ли заданный класс среди родителей
        return in_array($className, $parents, true);
    }
}


namespace App;

class HTMLDivElement extends HTMLElement
{
    // Нет необходимости добавлять специфическую логику здесь, если она не требуется
}
namespace App;

class HTMLElement
{
    private $attributes = [];

    public function __construct($attributes = [])
    {
        $this->attributes = $attributes;
    }

    public function addClass($className)
    {
        $classes = $this->getClassesAsArray();
        if (!in_array($className, $classes)) {
            $classes[] = $className;
        }
        $this->attributes['class'] = $this->classesArrayToString($classes);
    }

    public function removeClass($className)
    {
        $classes = $this->getClassesAsArray();
        $this->attributes['class'] = $this->classesArrayToString(array_filter($classes, function($class) use ($className) {
            return $class !== $className;
        }));
    }

    public function toggleClass($className)
    {
        $classes = $this->getClassesAsArray();
        if (in_array($className, $classes)) {
            $this->removeClass($className);
        } else {
            $this->addClass($className);
        }
    }

    public function getAttribute($attrName)
    {
        return $this->attributes[$attrName] ?? null;
    }

    private function getClassesAsArray()
    {
        if (empty($this->attributes['class'])) {
            return [];
        }
        return explode(' ', $this->attributes['class']);
    }

    private function classesArrayToString(array $classes)
    {
        return implode(' ', $classes);
    }

    protected function stringifyAttributes()
    {
        // Реализация зависит от требований к выводу атрибутов
    }
}





Модификаторы доступа
src\HTMLElement.php
Реализуйте набор методов для работы с классами:

addClass($className) – добавляет класс
removeClass($className) – удаляет класс
toggleClass($className) – ставит класс если его не было и убирает если он был
Эти методы должны обрабатывать свойство 'class' (внутри строка) массива $this->attributes. В процессе реализации вам понадобится постоянно преобразовывать строку классов в массив и обратно. Вынесите эту операцию в отдельные функции и установите им правильный модификатор доступа.

$div = new HTMLDivElement(['class' => 'one two']);
$div->getAttribute('class'); // 'one two'
 
$div->addClass('small');
$div->getAttribute('class'); // 'one two small'
 
$div->addClass('small');
$div->getAttribute('class'); // 'one two small'
 
$div->removeClass('two');
$div->getAttribute('class'); // 'one small'
 
$div->toggleClass('small');
$div->getAttribute('class'); // 'one'
 
$div->toggleClass('small');
$div->getAttribute('class'); // 'one small'

<?php

namespace App;

class HTMLElement
{
    private $attributes = [];

    public function __construct($attributes = [])
    {
        $this->attributes = $attributes;
    }

    protected function stringifyAttributes()
    {
        // BEGIN (write your solution here)
        
        // END
    }
}
<?php

namespace App;

class HTMLDivElement extends HTMLElement
{
}
